@inherits LayoutComponentBase
@inject NavigationManager UrlHelper;
@using Syncfusion.Blazor.DropDowns;
@using Syncfusion.Blazor.Buttons;
@using Microsoft.AspNetCore.WebUtilities

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <div class="main @darkClass">
        <div class="top-row px-4 @darkClass">
            <div class="theme-switcher">
                @*Theme switcher*@
                <SfDropDownList TItem="ThemeDetails" TValue="string" @bind-Value="themeName" DataSource="@Themes">
                    <DropDownListFieldSettings Text="Text" Value="ID"></DropDownListFieldSettings>
                    <DropDownListEvents TItem="ThemeDetails" TValue="string" ValueChange="OnThemeChange"></DropDownListEvents>
                </SfDropDownList>
            </div>
            <div>
                @*Theme mode switcher*@
                <SfButton @ref="ThemeMode" IsToggle="true" IsPrimary="true" Content="@themeMode" @onclick="OnThemeModeChange"></SfButton>
            </div>
            <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
        </div>

        <div class="content px-4">
            @Body
        </div>
    </div>
</div>

<style>
    .theme-switcher {
        margin-right: 24px;
    }

    .dark-bg,
    .top-row.dark-bg {
        background: #000000;
    }
</style>
@code {
    private string darkClass;
    private string themeName;
    private string themeMode;
    protected SfButton ThemeMode { get; set; }

    public class ThemeDetails
    {
        public string ID { get; set; }
        public string Text { get; set; }
    }
    @*Theme switcher datasource*@
    private List<ThemeDetails> Themes = new List<ThemeDetails>() {
        new ThemeDetails(){ ID = "material", Text = "Material" },
        new ThemeDetails(){ ID = "bootstrap", Text = "Bootstrap" },
    };

    /// <summary>
    /// The switcher OnChange event handler.
    /// </summary>
    public void OnThemeChange(ChangeEventArgs<string, ThemeDetails> args)
    {
        var theme = GetThemeName();
        if (theme != args.ItemData.ID)
        {
            var themeMode = theme.Contains("-dark") ? "-dark" : string.Empty;
            UrlHelper.NavigateTo(GetUri(args.ItemData.ID + themeMode), true);
        }
    }

    /// <summary>
    /// The mode switcher OnClick event handler.
    /// </summary>
    public void OnThemeModeChange()
    {
        var theme = GetThemeName().Replace("-dark", string.Empty);
        theme += (ThemeMode.Content == "Dark" ? "-dark" : string.Empty);
        UrlHelper.NavigateTo(GetUri(theme), true);
    }

    /// <summary>
    /// Returns the theme name from Uri QueryString.
    /// </summary>
    private string GetThemeName()
    {
        var uri = UrlHelper.ToAbsoluteUri(UrlHelper.Uri);
        QueryHelpers.ParseQuery(uri.Query).TryGetValue("theme", out var theme);
        theme = theme.Count > 0 ? theme.First() : "bootstrap";
        return theme;
    }

    /// <summary>
    /// Returns the new Uri to navigate with theme changes.
    /// </summary>
    private string GetUri(string themeName)
    {
        var uri = UrlHelper.ToAbsoluteUri(UrlHelper.Uri);
        return uri.AbsolutePath + "?theme=" + themeName;
    }

    protected override void OnInitialized()
    {
        var theme = GetThemeName();
        darkClass = theme.Contains("dark") ? "dark-bg" : string.Empty;
        themeMode = theme.Contains("dark") ? "Light" : "Dark";
        themeName = theme.Contains("bootstrap") ? "bootstrap" : "material";
    }
}